#+TITLE: Wire-Cell Toolkit 

Welcome to the Wire-Cell Toolkit source repository.

See http://wirecell.bnl.gov/ for documentation including user manual and news "blog".

[[https://travis-ci.org/WireCell/wire-cell-toolkit][https://api.travis-ci.org/WireCell/wire-cell-toolkit.svg?branch=master]]


* Installation

Wire-Cell Toolkit provides simple and automatic installation which
gives you, the installer, some options.  

** External software dependencies

The WCT dependency tree:

[[file:wct-deps.png]]

Anything that the ~WireCellUtil~ package depends on is required.  The
rest are optional.  Missing optional dependencies will cause the
dependent WCT package to not be built.

You may provide the necessary external software dependencies in a
manner of your own choosing and some options include:

- [[https://github.com/WireCell/wire-cell-spack][Spack-based install]] automatically builds all (non-OS) externals and WCT itself
- Some WCT releases are built at FNAL as a UPS product named =wirecell=.
- Exploit the above with a [[https://github.com/WireCell/wire-cell-singularity][Singularity container and CVMFS]] (currently recommended)

** Developer Source

Developers check out =master= branch via SSH.

#+BEGIN_EXAMPLE
  $ git clone git@github.com:WireCell/wire-cell-toolkit.git wct
#+END_EXAMPLE

** User Source

Users typically should build a release branch, either the tip or a
tagged release on that branch.  Tagged releases are shown on the [[https://github.com/WireCell/wire-cell-toolkit/releases][this
GitHub release page]].  

Users may also anonymously clone in the usual way:

#+BEGIN_EXAMPLE
  $ git clone https://github.com/WireCell/wire-cell-toolkit.git wct
#+END_EXAMPLE

** Configuring the source

On well-behaved systems, configuring the source may be as simple as:

#+BEGIN_EXAMPLE
  $ ./wcb configure --prefix=/path/to/install
#+END_EXAMPLE

Software dependencies which can not automatically be located in system
areas or via ~pkg-config~ can be manually specified.  For a list of
options run:

#+BEGIN_EXAMPLE
  $ ./wcb --help
#+END_EXAMPLE

Here is an example where some packages are found automatically and
some need help and others are explicitly turned off:

#+begin_example
  $ ./wcb configure \
          --prefix=$HOME/dev/wct/install \
          --with-jsonnet=$HOME/opt/jsonnet \
          --with-root=no
  ...
  Removing submodule "dfp" due to lack of external
  Removing package "tbb" due to lack of external dependency
  Removing package "root" due to lack of external dependency
  Removing package "cuda" due to lack of external dependency
  Configured for submodules: apps, cfg, gen, iface, img, pgraph, ress, sigproc, sio, util
  'configure' finished successfully (5.683s)
#+end_example

** Building

It is suggested to first build the code before running tests.

#+BEGIN_EXAMPLE
  $ ./wcb -p --notests
#+END_EXAMPLE

** Installing

To install the code while still avoiding the tests do:

#+BEGIN_EXAMPLE
  $ ./wcb -p --notests install
#+END_EXAMPLE

** Testing

Running the tests can take a while but should be run on new
installations and after any significant development.  The developers
try not to leave broken tests so any test failure should be treated as
important.  However, some tests require proper environment to run
successfully.  In particular, tests need to find Wire-Cell
configuration and the shared libraries of the external software
dependencies need to be located.  Below shows an example:

#+BEGIN_EXAMPLE
  $ export WIRECELL_PATH=$HOME/dev/wct/wire-cell-data:$HOME/dev/wct/wire-cell-toolkit/cfg
  $ export LD_LIBRARY_PATH=$HOME/dev/wct/install/lib:$HOME/opt/jsonnet/lib
  $ ./wcb -p --alltests
  ...
  execution summary 
    tests that pass 83/83
      ... 
    tests that fail 0/83 
  'build' finished successfully (15.192s)
#+END_EXAMPLE

* Release management

To make releases, the above details are baked into two test scripts
[[https://github.com/WireCell/waf-tools/blob/master/make-release.sh][make-release.sh]] and [[https://github.com/WireCell/waf-tools/blob/master/test-release.sh][test-release.sh]].  See comments at the top of each
for how to run them.  These scripts can be used by others but are
meant for developers to make official releases.

* Meta

A new =wcb= build script is made from [[https://github.com/waf-project/waf][waf source]] via:

#+BEGIN_EXAMPLE
  $ cd waf-tools
  $ ./refresh-wcb -o /path/to/wire-cell-toolkit/wcb
  $ cd /path/to/wire-cell-toolkit/
  $ git commit -am "update wcb" && git push
#+END_EXAMPLE



